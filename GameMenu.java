package OthelloReversi;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

import javax.swing.*;

/**
 * @author Ali Yılmaz
 */
public class GameMenu extends javax.swing.JFrame {

    /**
     * Creates new form GameMenu
     */
    private JButton[][] buttons;
    private int rows;
    private int cols;
    private int[][] gameBoard; // tahtayı temsil eden iki boyutlu dizi
    public static int firstPersonScore = 0;
    public static int secondPersonScore = 0;
    private int redcount = 0;
    private int yellowcount = 0;
    private final int CheckRow = 8;
    private final int CheckCol = 8;

    public static int panelWidth;
    public static int panelHeight;

    // private char currentPlayer;


    public GameMenu() {
        initComponents();
        // FirstPersonName.setText(LoginScreen.loggedInUser1);
        // SecondPersonName.setText(LoginScreen.loggedInUser2);

    }


    public JLabel getFirstPersonName() {
        return FirstPersonName;
    }

    public void setFirstPersonName(JLabel FirstPersonName) {
        this.FirstPersonName = FirstPersonName;
    }

    public JLabel getSecondPersonName() {
        return SecondPersonName;
    }

    public void setSecondPersonName(JLabel SecondPersonName) {
        this.SecondPersonName = SecondPersonName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        FirstPersonName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        SecondPersonName = new javax.swing.JLabel();
        jButtonYeniOyun = new javax.swing.JButton();
        jButtonScores = new javax.swing.JButton();
        jSpinner = new javax.swing.JSpinner();
        jButtonCikis = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemYeniOyun = new javax.swing.JMenuItem();
        jMenuItemCikis = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemSkorTablosu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        FirstPersonName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        FirstPersonName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FirstPersonName.setText("ş");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("VS");

        SecondPersonName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        SecondPersonName.setText("a");

        jButtonYeniOyun.setBackground(new java.awt.Color(0, 153, 153));
        jButtonYeniOyun.setText("YENİ OYUN");
        jButtonYeniOyun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonYeniOyunActionPerformed(evt);
            }
        });

        jButtonScores.setBackground(new java.awt.Color(0, 153, 153));
        jButtonScores.setText("SKORLAR");
        jButtonScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScoresActionPerformed(evt);
            }
        });

        jSpinner.setModel(new javax.swing.SpinnerListModel(new String[]{"5 x 5", "6 x 6", "7 x 7", "8 x 8", "9 x 9", "10 x 10"}));

        jButtonCikis.setBackground(new java.awt.Color(0, 153, 153));
        jButtonCikis.setText("ÇIKIŞ");
        jButtonCikis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCikisActionPerformed(evt);
            }
        });

        jMenu1.setText("Oyun");

        jMenuItemYeniOyun.setText("Yeni Oyun");
        jMenuItemYeniOyun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemYeniOyunActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemYeniOyun);

        jMenuItemCikis.setText("Çıkış");
        jMenuItemCikis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCikisActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCikis);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Skorlar");

        jMenuItemSkorTablosu.setText("Skor Tablosu");
        jMenu2.add(jMenuItemSkorTablosu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(FirstPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(SecondPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addComponent(jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jButtonCikis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButtonYeniOyun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jButtonScores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(FirstPersonName)
                                        .addComponent(jLabel2)
                                        .addComponent(SecondPersonName))
                                .addGap(82, 82, 82)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButtonYeniOyun)
                                        .addComponent(jSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonScores)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCikis)
                                .addContainerGap(37, Short.MAX_VALUE))

        );

        pack();
    }// </editor-fold>

    private void jMenuItemCikisActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(this, "Çıkamak istediğinden emin misin ?", "Çıkış", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            System.exit(0);
        }

    }

    private void jButtonYeniOyunActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        rows = Integer.parseInt(this.getjSpinnerRows());
        System.out.println(rows);

        cols = Integer.parseInt(this.getjSpinnerCols());
        System.out.println(cols);
        panelWidth = (600 - 10 * (cols + 1)) / cols;
        panelHeight = (600 - 10 * (rows + 1)) / rows;

        createGameBoard(rows, cols);
        determineStartingPlayer();
        if (startingPlayer == 'R') {
            JOptionPane.showMessageDialog(null, FirstPersonName.getText() + " (Kırmızı) Başlıyor");
        } else if (startingPlayer == 'Y') {
            JOptionPane.showMessageDialog(null, SecondPersonName.getText() + "(Sarı)  Başlıyor");
        }


    }

    private void jMenuItemYeniOyunActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        // spinner ile satır ve sütun sayısını alıp oyunu başlatma
        rows = Integer.parseInt(this.getjSpinnerRows());
        cols = Integer.parseInt(this.getjSpinnerCols());
        //paneşin boyutunu hesaplıyoruz
        panelWidth = (600 - 10 * (cols + 1)) / cols;
        panelHeight = (600 - 10 * (rows + 1)) / rows;
        //oyun tahtasını oluşturuyoruz
        createGameBoard(rows, cols);
        //başlangıç oyuncusunu belirliyoruz
        determineStartingPlayer();
        if (startingPlayer == 'R') {
            JOptionPane.showMessageDialog(null, FirstPersonName.getText() + " (Kırmızı) Başlıyor");
        } else if (startingPlayer == 'Y') {
            JOptionPane.showMessageDialog(null, SecondPersonName.getText() + "(Sarı)  Başlıyor");
        }

    }

    private void jButtonCikisActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //çıkış
        int response = JOptionPane.showConfirmDialog(this, "Çıkamak istediğinden emin misin ?", "Çıkış", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            System.exit(0);
        }

    }

    private void jButtonScoresActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //skorları göster
        ScoresFrame scoresFrame = new ScoresFrame();

        scoresFrame.setVisible(true);
        this.dispose();


    }

    public String getjSpinnerRows() {
        //spinnerdan seçilen değeri al ve split et
        String selectedValue = jSpinner.getValue().toString();
        String[] splitValue = selectedValue.split(" x ");
        return splitValue[0];
    }

    public String getjSpinnerCols() {
        //spinnerdan seçilen değeri al ve split et
        String selectedValue = jSpinner.getValue().toString();
        String[] splitValue = selectedValue.split(" x ");
        return splitValue[1];
    }

    public void createGameBoard(int rows, int cols) {
        // butonları oluştur
        this.buttons = new JButton[rows + 1][cols + 1];

        JFrame frame = new JFrame("Othello Game");
        frame.setSize(800, 800);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel boardPanel = new JPanel(new GridLayout(rows, cols));
        //panele skor yazdır ve sıra kimde onu da yazdır
        boardPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));




        //tahta dizisini oluştur
        gameBoard = new int[rows + 1][cols + 1];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                gameBoard[i][j] = ' ';
            }
        }


        // row ve col sayısına göre butonları oluştur
        for (int i = 0; i < rows * cols; i++) {
            int row = i / rows;
            int col = i % cols;
            //currentPlayer = 1;


            // Hücreyi oluştur

            JButton button = new JButton();

            // butona tıklandığında gerçekleşecek olayları belirle


            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                 if (startingPlayer=='R') {
                     System.out.println("(Kırmızı Oyuncu) "+FirstPersonName.getText()+" satır : " + row + " sütun: " + col+" hamle yaptı");
                     System.out.println("Sıra "+SecondPersonName.getText()+" Sarı Oyuncu "+"'da");
                     System.out.println("----------------------------------------------------");

                 } else {
                        System.out.println("(Sarı Oyuncu) "+SecondPersonName.getText()+" satır : " + row + " sütun: " + col+" hamle yaptı");
                        System.out.println("Sıra "+FirstPersonName.getText()+" Kırmızı Oyuncu "+"'da");
                        System.out.println("----------------------------------------------------");

                 }

                    if (gameBoard[row][col] == ' ') {
                        if (isValidMove(row, col, startingPlayer)) {
                            doMove(row, col, startingPlayer);
                            startingPlayer = (startingPlayer == 'R') ? 'Y' : 'R';
                            if (!hasValidMove(startingPlayer)) {
                                startingPlayer = (startingPlayer == 'R') ? 'Y' : 'R';
                            }
                            clearHighlights(); // önceki vurguları temizle
                            highlightValidMoves(startingPlayer); // geçerli hareketleri göster
                        } else {
                            JOptionPane.showMessageDialog(null, "Geçersiz hamle!");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Bu hücre dolu!");
                    }
                }
            });


            //butonun boyutunu ve kenarlığını ayarla
            button.setMargin(new Insets(0, 0, 0, 0));
            button.setPreferredSize(new Dimension(panelWidth, panelHeight));
            button.setBorder(BorderFactory.createLineBorder(Color.black, 2));
            button.setBackground(Color.green);

            // Hücreye butonu ekle
            buttons[row][col] = button;

            // Hücrenin ortasındaki dört hücreyi ayarla
            if ((row == rows / 2 - 1 && col == cols / 2 - 1) || (row == rows / 2 && col == cols / 2)) {
                gameBoard[row][col] = 'R'; // Kırmızı kuş

                updateCell(row, col, 'R');

            } else if ((row == rows / 2 - 1 && col == cols / 2) || (row == rows / 2 && col == cols / 2 - 1)) {
                gameBoard[row][col] = 'Y'; // sarıı kuş

                updateCell(row, col, 'Y');

            } else {
                gameBoard[row][col] = ' '; // boş


            }


            boardPanel.add(button); // Butonu panele ekle
        }
        //frameye paneli ekle
        frame.getContentPane().add(boardPanel);
        frame.setVisible(true);
        this.dispose();
    }


    private void clearHighlights() {// önceki vurguları temizle
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (gameBoard[i][j] == ' ') {
                    buttons[i][j].setBackground(Color.green);
                }
            }
        }
    }

    private void highlightValidMoves(char currentPlayer) {// geçerli hareketleri tahta üzerinde göster
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (gameBoard[i][j] == ' ') {
                    if (isValidMove(i, j, currentPlayer)) {
                        buttons[i][j].setBackground(Color.yellow);
                    } else {
                        buttons[i][j].setBackground(Color.green);
                    }
                } else {
                    buttons[i][j].setBackground(Color.green);
                }
            }
        }
    }


    private boolean hasValidMove(char currentPlayer) {// geçerli hamle var mı?
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (gameBoard[i][j] == ' ' && isValidMove(i, j, currentPlayer)) {
                    return true;
                }
            }
        }
        return false;
    }


    private boolean checkWinner() {// kazanan var  onu kontrol et
        // TODO Auto-generated method stub

        //tüm tahtayı kontrol ediyor eğer tahtadaki hücre R ise redcount artıyor Y ise  yellowcount artıyor
        for (int i = 0; i < gameBoard.length - 1; i++) {
            for (int j = 0; j < gameBoard[i].length - 1; j++) {
                if (gameBoard[i][j] == 'R') {

                    redcount++;
                    firstPersonScore = redcount;
                } else if (gameBoard[i][j] == 'Y') {

                    yellowcount++;
                    secondPersonScore = yellowcount;
                }
            }
        }
        //redcount ve yellowcount a göre kazananı belirliyor
        if (redcount > yellowcount) {
            JOptionPane.showConfirmDialog(null, FirstPersonName.getText() + " (Kırmızı) kazandı", "SONUC", JOptionPane.DEFAULT_OPTION);
            AskPlayAgain();
        } else if (yellowcount > redcount) {
            JOptionPane.showConfirmDialog(null, SecondPersonName.getText() + " (Sarı) kazandı", "SONUC", JOptionPane.DEFAULT_OPTION);
            AskPlayAgain();
        } else {
            JOptionPane.showConfirmDialog(null, "BERABERLİK ", "SONUC", JOptionPane.DEFAULT_OPTION);
            AskPlayAgain();
        }
        return false;
    }


    private boolean isGameOver() {

        //tüm hücreler doluysa veya geçerli hamle yoksa oyun biter
        if (isBoardFull() || !hasValidMove('R') && !hasValidMove('Y')) {
        checkWinner();
            try {
                // dosyaya skorları yaz
                BufferedWriter writer = new BufferedWriter(new FileWriter("scores.txt", true));
                String line = FirstPersonName.getText() + "," + SecondPersonName.getText() + "," + firstPersonScore + "," + secondPersonScore;
                writer.write(line);
                writer.newLine();
                writer.close();


            } catch (Exception e) {
                System.out.println("Dosya yazılırken hata oluştu");
            }
        }

        return false;


    }

    private boolean isBoardFull() {
        // TODO Auto-generated method stub
        //tüm tahtayı kontrol ediyor eğer tahtadaki hücre boş değilse count artıyor
        int count = 0;

        for (int i = 0; i < gameBoard.length - 1; i++) {
            for (int j = 0; j < gameBoard[i].length - 1; j++) {
                if (gameBoard[i][j] == ' ') {
                    count++;
                }
            }
        }
        //count 0 ise tahta dolu demektir
        if (count == 0) {
            return true;
        }
        return false;
    }


    private void AskPlayAgain() {
        // TODO Auto-generated method stub
        //tekrar oynmak isteyip istemediğini sor
        int option = JOptionPane.showConfirmDialog(null, "Ana menüye dönmek  ister misiniz?", "Oyun Bitti", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            this.dispose();
            new GameMenu().setVisible(true);
        } else {
            System.exit(0);
        }
    }


    private void updateCell(int row, int col, int player) {

        //butonun boyutunu ayarla
        JButton button = buttons[row][col];

        // eğer oyuncu kırmızıysa kırmızı kuşu göster yoksa sarı kuşu göster
        if (player == 'R') {
            ImageIcon redIcon = new ImageIcon(getClass().getResource("RedBird.png"));
            Image redImg = redIcon.getImage().getScaledInstance(panelWidth, panelHeight, Image.SCALE_SMOOTH);
            button.setIcon(new ImageIcon(redImg));
        } else {
            ImageIcon yellowIcon = new ImageIcon(getClass().getResource("YellowBird.png"));
            Image yellowImg = yellowIcon.getImage().getScaledInstance(panelWidth, panelHeight, Image.SCALE_SMOOTH);
            button.setIcon(new ImageIcon(yellowImg));
        }
    }

    private boolean isFirstMove = true;
    private char startingPlayer;

    public void determineStartingPlayer() {
        // İlk oyuncuyu rasgele seç
        if (isFirstMove) {
            int random = (int) (Math.random() * 2);
            if (random == 0) {
                startingPlayer = 'R';
            } else {
                startingPlayer = 'Y';
            }
            isFirstMove = false;
        }
    }


    private boolean isValidMove(int row, int col, char player) {
        if (gameBoard[row][col] != ' ') {
            return false; // Taş zaten varsa geçersiz hamle
        }
        int[][] directions = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        boolean validMove = false;
        // Her yönde rakip oyuncunun taşlarını kontrol et
        for (int[] direction : directions) {
            int newRow = row + direction[0];
            int newCol = col + direction[1];
            while (newRow >= 0 && newRow < CheckRow && newCol >= 0 && newCol < CheckCol && gameBoard[newRow][newCol] == getOpponent(player)) {
                newRow += direction[0];
                newCol += direction[1];
                // Eğer mevcut yönde, arka arkaya rakip taşlarının ardından kendi taşı varsa, geçerli hamledir
                if (newRow >= 0 && newRow < CheckRow && newCol >= 0 && newCol < CheckCol && gameBoard[newRow][newCol] == player) {
                    validMove = true;
                    break;
                }
            }
        }
        return validMove;
    }


    private boolean doMove(int row, int col, char player) {

        gameBoard[row][col] = player; // Taşı yerleştir
        updateCell(row, col, player); // Taşı grafikte güncelle
        flipTiles(row, col, player); // Taşları çevir
        if (isGameOver()) {
            checkWinner();
        }
        return false;
    }


    private void flipTiles(int row, int col, char player) {
        //tüm kareleri kontrol et
        int[][] directions = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        // Taşları çevirmek için tutulacak liste
        List<Point> toBeFlipped = new ArrayList<>();
        for (int[] direction : directions) {
            // Yeni konumları hesapla
            int newRow = row + direction[0];
            int newCol = col + direction[1];
            // Yeni konumlar geçerliyse ve rakip oyuncunun taşı var mı kontrolu yap
            while (newRow >= 0 && newRow < CheckRow && newCol >= 0 && newCol < CheckCol && gameBoard[newRow][newCol] == getOpponent(player)) {
                // Taşları çevirmek için listeye ekle ve yeni konumları hesapla
                toBeFlipped.add(new Point(newRow, newCol));
                newRow += direction[0];
                newCol += direction[1];
            }
            if (newRow >= 0 && newRow < CheckRow && newCol >= 0 && newCol < CheckCol && gameBoard[newRow][newCol] == player) {
                // Eğer yeni konumlar geçerliyse ve yeni konumlarda kendi taşın varsa, listedeki taşları çevir
                for (Point p : toBeFlipped) {
                    gameBoard[p.x][p.y] = player; // Taşları değiştir
                    updateCell(p.x, p.y, player); // Grafikleri güncelle
                }
            }
            toBeFlipped.clear();
        }
    }


    private char getOpponent(char player) {
        // Rakip oyuncuyu döndür
        return player == 'R' ? 'Y' : 'R';
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel FirstPersonName;
    private javax.swing.JLabel SecondPersonName;
    private javax.swing.JButton jButtonCikis;
    private javax.swing.JButton jButtonScores;
    private javax.swing.JButton jButtonYeniOyun;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemCikis;
    private javax.swing.JMenuItem jMenuItemSkorTablosu;
    private javax.swing.JMenuItem jMenuItemYeniOyun;
    private javax.swing.JSpinner jSpinner;
    // End of variables declaration
}
